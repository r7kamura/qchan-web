// Generated by CoffeeScript 1.6.2
(function() {
  var Qchan;

  Qchan = {
    Models: {},
    Repositories: {},
    Views: {}
  };

  Qchan.Mediator = (function() {
    function Mediator() {
      $.observable(this);
    }

    return Mediator;

  })();

  Qchan.Models.User = (function() {
    function User() {
      $.observable(this);
      this.repository = Qchan.Repository["for"]('user');
      this.keys = ['access_token', 'email', 'name'];
      this.pull();
    }

    User.prototype.set = function(attributes) {
      var key, _i, _len, _ref, _results;

      _ref = this.keys;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        _results.push(this.repository.set(key, this[key] = attributes[key]));
      }
      return _results;
    };

    User.prototype.pull = function() {
      var key, _i, _len, _ref, _results;

      _ref = this.keys;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        _results.push(this[key] = this.repository.get(key));
      }
      return _results;
    };

    return User;

  })();

  Qchan.Repositories.LocalStorageRepository = (function() {
    function LocalStorageRepository() {}

    LocalStorageRepository.prototype.get = function(key) {
      return window.localStorage.getItem(key);
    };

    LocalStorageRepository.prototype.set = function(key, value) {
      return window.localStorage.setItem(key, value);
    };

    return LocalStorageRepository;

  })();

  Qchan.Repository = (function() {
    function Repository() {}

    Repository.table = {};

    Repository.register = function(name, storage) {
      return this.table[name] = storage;
    };

    Repository["for"] = function(name) {
      return this.table[name];
    };

    return Repository;

  })();

  Qchan.URIFragmentParser = (function() {
    URIFragmentParser.parse = function(fragment) {
      return new this(fragment).parse();
    };

    function URIFragmentParser(fragment) {
      this.fragment = fragment;
    }

    URIFragmentParser.prototype.parse = function() {
      var key, segment, table, value, _i, _len, _ref, _ref1;

      table = {};
      _ref = this.segments();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        segment = _ref[_i];
        _ref1 = segment.split('=', 2), key = _ref1[0], value = _ref1[1];
        if (value) {
          table[key] = window.decodeURIComponent(value);
        }
      }
      return table;
    };

    URIFragmentParser.prototype.segments = function() {
      return this.fragment.substr(1).split('&');
    };

    return URIFragmentParser;

  })();

  Qchan.Views.Application = (function() {
    function Application() {
      Qchan.mediator = new Qchan.Mediator();
      this.element = $('#application');
      this.element.html("<header id=\"header\">\n  <h1>Qchan</h1>\n\n  <div class=\"authentication\">\n    <a href=\"http://localhost:3000/auth/authorize?redirect_to=http%3A%2F%2Flocalhost%3A4000\">\n      sign in\n    </a>\n  </div>\n</header>\n<div id=\"main\"></div>");
      this.header = new Qchan.Views.Header({
        element: this.element.find('#header')
      });
      Qchan.mediator.trigger('load');
    }

    return Application;

  })();

  Qchan.Views.Authentication = (function() {
    function Authentication(_arg) {
      var _this = this;

      this.element = _arg.element;
      this.template = "<div class=\"name\">\n  welcome, {name}\n</div>";
      Qchan.mediator.on('load', function() {
        return _this.updateUserWithURIFragments();
      });
      Qchan.mediator.on('signedIn', function() {
        return _this.render();
      });
      this.user = new Qchan.Models.User();
      this.triggerIfSignedIn();
    }

    Authentication.prototype.render = function() {
      return this.element.html($.render(this.template, this.user));
    };

    Authentication.prototype.updateUserWithURIFragments = function() {
      if (this.hasUserAttributes()) {
        this.user.set(this.userAttributes());
        return this.triggerIfSignedIn();
      }
    };

    Authentication.prototype.triggerIfSignedIn = function() {
      if (this.user.access_token) {
        return Qchan.mediator.trigger('signedIn');
      }
    };

    Authentication.prototype.userAttributes = function() {
      return this.__userAttributes || (this.__userAttributes = Qchan.URIFragmentParser.parse(window.location.hash));
    };

    Authentication.prototype.hasUserAttributes = function() {
      return !!this.userAttributes().access_token;
    };

    return Authentication;

  })();

  Qchan.Views.Header = (function() {
    function Header(_arg) {
      this.element = _arg.element;
      this.authentication = new Qchan.Views.Authentication({
        element: this.element.find('.authentication')
      });
    }

    return Header;

  })();

  Qchan.Repository.register('user', new Qchan.Repositories.LocalStorageRepository());

  new Qchan.Views.Application();

}).call(this);
